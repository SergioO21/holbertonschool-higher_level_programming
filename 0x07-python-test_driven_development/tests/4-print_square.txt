===============================================================================

████████╗███████╗███████╗████████╗     ██████╗ █████╗ ███████╗███████╗███████╗
╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝    ██╔════╝██╔══██╗██╔════╝██╔════╝██╔════╝
   ██║   █████╗  ███████╗   ██║       ██║     ███████║███████╗█████╗  ███████╗
   ██║   ██╔══╝  ╚════██║   ██║       ██║     ██╔══██║╚════██║██╔══╝  ╚════██║
   ██║   ███████╗███████║   ██║       ╚██████╗██║  ██║███████║███████╗███████║
   ╚═╝   ╚══════╝╚══════╝   ╚═╝        ╚═════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝
                                                                              
===============================================================================

	---------- Importing the ``print_square`` function ----------
	>>> print_square = __import__('4-print_square').print_square

==================== Principal requirements checkers ====================


	---------- Check that the file is executable ----------
	>>> import os
	>>> os.access('4-print_square.py', os.X_OK)
	True

	---------- Check for the documentation of the module ----------
	>>> len(__import__("4-print_square").__doc__) > 10
	True

	---------- Check for the documentation of the function ----------
	>>> len(__import__("4-print_square").print_square.__doc__) > 10
	True

	---------- Check for pep8 style ----------
	>>> os.popen("pep8 4-print_square.py").read()
	''

	---------- Check for a newline at the end of the file ----------
	>>> os.popen("cat -e 4-print_square.py | tail -1").read()[-1]
	'\n'

	---------- Check for the file has a shebang ----------
	>>> os.popen("cat 4-print_square.py | head -1").read()
	'#!/usr/bin/python3\n'

	---------- Check that the README file exists ----------
	>>> cwd = os.getcwd()
	>>> check_readme = cwd + '/README.md'
	>>> os.path.exists(check_readme)
	True




==================== Correct operation of the program ====================


	>>> print_square(0)



	>>> print_square(4)
	####
	####
	####
	####


	>>> print_square(1)
	#


	>>> print_square(8)
	########
	########
	########
	########
	########
	########
	########
	########


==================== Testing with invalid numeric values ====================


	>>> print_square(-9)
	Traceback (most recent call last):
		...
	ValueError: size must be >= 0


	>>> print_square(-20)
	Traceback (most recent call last):
		...
	ValueError: size must be >= 0


	>>> print_square(10.7)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square(1.2)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square(-42.9)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square(-4.9)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


==================== Testing with any type of data ====================


	>>> print_square(None)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square("8")
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square([10, 5, 82, 70])
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square("Hello World")
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square((1, 2, 3))
	Traceback (most recent call last):
		...
	TypeError: size must be an integer


	>>> print_square({"First": 10, "Second": 20, "Third": 30})
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

